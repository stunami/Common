<?php
namespace Versionable\Common\Collection;

use Versionable\Common\Collection\MockComparableItem as Element;

/**
 * Test class for AbstractList.
 * Generated by PHPUnit on 2011-04-27 at 09:08:58.
 */
class AbstractListTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractList
     */
    protected $object;

    protected $elements = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = $this->getMockForAbstractClass('Versionable\Common\Collection\AbstractList');

        $this->elements['alpha'] = new Element('alpha');
        $this->elements['bravo'] = new Element('bravo');
        $this->elements['charlie'] = new Element('charlie');
        $this->elements['delta'] = new Element('delta');
        $this->elements['echo'] = new Element('echo');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testAddAt()
    {
      $object = new \stdClass();
      $object->name = 'one';
      $this->object->addAt(0, $object);
      $this->assertEquals($object, $this->object->get(0));
    }

    public function testAddAtFail()
    {
      $this->setExpectedException('\OutOfBoundsException');

      $this->object->addAt(1, new \stdClass());
    }

    public function testAddAllAt()
    {
      $this->object = $this->getMockForAbstractClass('Versionable\Common\Collection\AbstractList', array(array_values($this->elements)));

      $elements = array();
      $elements[] = new Element('foxtrot');
      $elements[] = new Element('gamma');

      $list = $this->getMockForAbstractClass('Versionable\Common\Collection\AbstractList', array($elements));

      $this->object->addAllAt(2, $list);

      $expected = array();

      $expected[] = new Element('alpha');
      $expected[] = new Element('bravo');
      $expected[] = $elements[0];
      $expected[] = $elements[1];
      $expected[] = new Element('charlie');
      $expected[] = new Element('delta');
      $expected[] = new Element('echo');


      $this->assertEquals($expected, $this->readAttribute($this->object, 'elements'));
    }

    public function testGet()
    {
      $this->object = $this->getMockForAbstractClass('Versionable\Common\Collection\AbstractList', array(array_values($this->elements)));

      $this->assertEquals($this->elements['echo'], $this->object->get(4));
    }

    public function testGetOutOfBounds()
    {
      $this->setExpectedException('\\OutOfBoundsException');
      $this->object->get(100);
    }

    public function testIndexOf()
    {
      $this->object = $this->getMockForAbstractClass('Versionable\Common\Collection\AbstractList', array(array_values($this->elements)));

      $this->assertEquals(4, $this->object->indexOf($this->elements['echo']));
    }

    public function testIndexOfFalse()
    {
      $this->object = $this->getMockForAbstractClass('Versionable\Common\Collection\AbstractList', array(array_values($this->elements)));

      $this->assertFalse($this->object->indexOf(new Element('missing')));
    }

    /**
     * @todo Implement testRemoveAt().
     */
    public function testRemoveAt()
    {
      $this->object = $this->getMockForAbstractClass('Versionable\Common\Collection\AbstractList', array(array_values($this->elements)));

      $this->object->removeAt(4);

      $expected = array_values($this->elements);
      unset($expected[4]);

      $this->assertEquals($expected, $this->readAttribute($this->object, 'elements'));
    }

    public function testRemoveAtFalse()
    {
      $this->assertFalse($this->object->removeAt(100));
    }

    public function testSet()
    {
      $one = new \stdClass();
      $one->name = 'one';

      $two = new \stdClass();
      $two->name = 'two';

      $this->object->add($one);
      $this->object->set(0, $two);

      $elements = $this->readAttribute($this->object, 'elements');

      $this->assertEquals($two, $elements[0]);
    }

    public function testSetOutOfBounds()
    {
      $this->setExpectedException('\\OutOfBoundsException');
      $this->object->set(1, 200);
    }

    public function testSubList()
    {
      $elements = array();
      $elements[] = $this->elements['alpha'];
      $elements[] = $this->elements['bravo'];
      $elements[] = $this->elements['charlie'];
      $elements[] = $this->elements['delta'];
      $elements[] = $this->elements['echo'];

      $collection = $this->getMockForAbstractClass('Versionable\Common\Collection\Collection', array($elements));

      $this->object->addAll($collection);

      $expected = array($this->elements['charlie'], $this->elements['delta']);

      $this->assertEquals($expected, $this->object->subList(2, 4));
    }

    public function testSubListOutOfBounds()
    {
      $this->setExpectedException('\OutOfBoundsException');

      $elements = array();
      $elements[] = $this->elements['alpha'];
      $elements[] = $this->elements['bravo'];
      $elements[] = $this->elements['charlie'];
      $elements[] = $this->elements['delta'];
      $elements[] = $this->elements['echo'];

      $collection = $this->getMockForAbstractClass('Versionable\Common\Collection\Collection', array($elements));

      $this->object->addAll($collection);

      $this->object->subList(2, 10);
    }

    public function testSubListReversedRange()
    {
      $this->setExpectedException('\OutOfBoundsException');

      $elements = array();
      $elements[] = $this->elements['alpha'];
      $elements[] = $this->elements['bravo'];
      $elements[] = $this->elements['charlie'];
      $elements[] = $this->elements['delta'];
      $elements[] = $this->elements['echo'];

      $collection = $this->getMockForAbstractClass('Versionable\Common\Collection\Collection', array($elements));

      $this->object->addAll($collection);

      $this->object->subList(3, 2);
    }

}