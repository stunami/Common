<?php
namespace Versionable\Tests\Common\Collection;

use Versionable\Common\Collection\Set;
use Versionable\Common\Collection\MockComparableItem as Element;

/**
 * Test class for Set.
 * Generated by PHPUnit on 2011-01-14 at 10:32:17.
 */
class SetTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Set
     */
    protected $object;

    protected $elements = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Set();

        $this->elements['alpha'] = new Element('alpha');
        $this->elements['bravo'] = new Element('bravo');
        $this->elements['charlie'] = new Element('charlie');
        $this->elements['delta'] = new Element('delta');
        $this->elements['echo'] = new Element('echo');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testAdd()
    {
      $this->object->add($this->elements['alpha']);
    }


    public function testAddNoDuplicates() {
      $this->setExpectedException('\\InvalidArgumentException');
      $element = $this->elements['alpha'];
      $this->object->add($element);
      $this->object->add($element);
    }

    public function testAddAll()
    {
      $set = $this->getMockForAbstractClass('\\Versionable\\Common\\Collection\\Set');
      $set->add($this->elements['alpha']);
      $set->add($this->elements['bravo']);
      $set->add($this->elements['charlie']);

      $this->object->addAll($set);

      $elements = $this->readAttribute($this->object, 'elements');
      $this->assertEquals(array($this->elements['alpha'],$this->elements['bravo'],$this->elements['charlie']), $elements);
    }

    public function testAddAllNoDuplicates()
    {
      $this->setExpectedException('\\InvalidArgumentException');

      $this->object->add($this->elements['alpha']);

      $set = $this->getMockForAbstractClass('\\Versionable\\Common\\Collection\\Set');
      $set->add($this->elements['alpha']);
      $set->add($this->elements['bravo']);
      $set->add($this->elements['charlie']);

      $this->object->addAll($set);
    }

    public function testSerialize()
    {
      $this->object->add($this->elements['alpha']);
      $this->object->add($this->elements['bravo']);

      $this->assertEquals(serialize($this->readAttribute($this->object, 'elements')), $this->object->serialize());
    }

    public function testUnserialize()
    {
      $elements = array($this->elements['alpha'], $this->elements['bravo']);

      $this->object->unserialize(serialize($elements));

      $this->assertEquals($elements, $this->readAttribute($this->object, 'elements'));
    }

    public function testUnserializeInvalid()
    {
      $this->setExpectedException('\\InvalidArgumentException');

      $this->object->unserialize('invalid');
    }
}