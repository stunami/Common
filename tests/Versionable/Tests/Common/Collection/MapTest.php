<?php
namespace Versionable\Tests\Common\Collection;

use Versionable\Common\Collection\Map;
use Versionable\Common\Collection\Set;

/**
 * Test class for Map.
 * Generated by PHPUnit on 2011-04-29 at 21:38:31.
 * @covers Versionable\Common\Collection\MapInterface
 */
class MapTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Map
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Map;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function constructProvider()
    {
        return array(
            array(null),
            array($this->getMock('Versionable\Common\Validator\ValidatorInterface')),
        );
    }

    /**
     * @covers Versionable\Common\Collection\Map
     * @dataProvider constructProvider
     */
    public function testConstruct($validator)
    {
        $this->object = new Map($validator);
        $expected = get_class($validator);
        if (null === $validator)
        {
            $expected = 'Versionable\Common\Validator\ObjectValidator';
        }

        $this->assertInstanceOf($expected, $this->object->getValidator());
    }

    /**
     * @covers Versionable\Common\Collection\Map::toArray
     */
    public function testToArray()
    {
        $data = array(
            'one' => new \stdClass(),
            'two' => new \stdClass()
        );

        $this->object->put('one', $data['one']);
        $this->object->put('two', $data['two']);

        $this->assertEquals($data, $this->object->toArray());
    }

    /**
     * @covers Versionable\Common\Collection\Map::clear
     * @depends testToArray
     */
    public function testClear()
    {
        $this->object->put('one', new \stdClass());
        $this->object->put('two', new \stdClass());

        $this->object->clear();

        $this->assertEquals(array(), $this->object->toArray());
    }

    /**
     * @covers Versionable\Common\Collection\Map::containsKey
     */
    public function testContainsKeyTrue()
    {
        $key = 'one';
        $this->object->put($key, new \stdClass());

        $this->assertTrue($this->object->containsKey($key));
    }

    /**
     * @covers Versionable\Common\Collection\Map::containsKey
     */
    public function testContainsKeyFalse()
    {
        $key = 'one';
        $this->object->put($key, new \stdClass());

        $this->assertFalse($this->object->containsKey('two'));
    }

    /**
     * @covers Versionable\Common\Collection\Map::containsValue
     */
    public function testContainsValueTrue()
    {
        $object = new \stdClass();
        $this->object->put('one', $object);

        $this->assertTrue($this->object->containsValue($object));
    }

    /**
     * @covers Versionable\Common\Collection\Map::containsValue
     */
    public function testContainsValueFalse()
    {
        $object = new \stdClass();
        $this->object->put('one', $object);

        $object2 = new \stdClass();

        $this->assertFalse($this->object->containsValue($object2));
    }

    /**
     * @covers Versionable\Common\Collection\Map::entrySet
     */
    public function testEntrySet()
    {
        $set = new Set($this->object->toArray());
        $this->assertEquals($set, $this->object->entrySet());
    }

    /**
     * @covers Versionable\Common\Collection\Map::equals
     */
    public function testEqualsTrue()
    {
        $this->object->put('one', new \stdClass());

        $map = clone $this->object;

        $this->assertTrue($this->object->equals($map));

    }

    /**
     * @covers Versionable\Common\Collection\Map::equals
     */
    public function testEqualsFalse()
    {
        $this->object->put('one', new \stdClass());

        $map = new Map();

        $this->assertFalse($this->object->equals($map));

    }

    /**
     * @covers Versionable\Common\Collection\Map::get
     */
    public function testGet()
    {
        $value = new \stdClass();
        $this->object->put('one', $value);

        $this->assertEquals($value, $this->object->get('one'));
    }

    /**
     * @covers Versionable\Common\Collection\Map::get
     */
    public function testGetNull()
    {
        $value = new \stdClass();
        $this->object->put('one', $value);

        $this->assertNull($this->object->get('two'));
    }

    /**
     * @covers Versionable\Common\Collection\Map::hashCode
     * @depends testToArray
     */
    public function testHashCode()
    {
        $hash = sha1('Versionable\Common\Collection\Map' . serialize($this->object->toArray()));

        $this->assertEquals($hash, $this->object->hashCode());
    }

    /**
     * @covers Versionable\Common\Collection\Map::isEmpty
     * @depends testToArray
     */
    public function testIsEmpty()
    {
      $elements = $this->object->toArray();
      $this->assertEquals(empty($elements), $this->object->isEmpty());
      $this->object->put('one', new \stdClass());
      $elements = $this->object->toArray();
      $this->assertEquals(empty($elements), $this->object->isEmpty());
    }

    /**
     * @covers Versionable\Common\Collection\Map::keySet
     * @depends testToArray
     */
    public function testKeySet()
    {
        $keys = $this->object->keySet();

        $expected = new Set(array_keys($this->object->toArray()));

        $this->assertEquals($expected, $keys);
    }

    /**
     * @covers Versionable\Common\Collection\Map::put
     * @covers Versionable\Common\Collection\Map::isValid
     * @depends testToArray
     */
    public function testPut()
    {
        $key = 'one';
        $value = new \stdClass();

        $this->object->put($key, $value);

        $this->assertEquals(array($key => $value), $this->object->toArray());
    }

    /**
     * @covers Versionable\Common\Collection\Map::put
     * @covers Versionable\Common\Collection\Map::isValid
     */
    public function testPutInvalid()
    {
        $this->setExpectedException('\\InvalidArgumentException');
        $key = 'one';
        $value = 'not valid';

        $this->object->put($key, $value);
    }

    /**
     * @covers Versionable\Common\Collection\Map::putAll
     * @depends testToArray
     */
    public function testPutAll()
    {
        $elements = array('one' => new \stdClass(), 'two' => new \stdClass());
        $map = new Map();
        $map->put(key($elements), current($elements));
        next($elements);
        $map->put(key($elements), current($elements));

        $this->object->putAll($map);

        $this->assertEquals($elements, $this->object->toArray());
    }

    /**
     * @covers Versionable\Common\Collection\Map::remove
     * @depends testToArray
     */
    public function testRemove()
    {
        $key = 'one';
        $value = new \stdClass();

        $this->object->put($key, $value);

        $this->assertEquals(array($key => $value), $this->object->toArray());

        $this->object->remove($key);

        $this->assertEmpty($this->object->toArray());
    }

    /**
     * @covers Versionable\Common\Collection\Map::count
     */
    public function testCount()
    {
        $this->object->put('one', new \stdClass());
        $this->object->put('two', new \stdClass());
        $this->object->put('three', new \stdClass());
        $this->object->put('four', new \stdClass());
        $this->object->put('five', new \stdClass());

        $this->assertEquals(5, $this->object->count());
    }

    /**
     * @covers Versionable\Common\Collection\Map::values
     */
    public function testValues()
    {
        $value1 = new \stdClass();
        $value2 = new \stdClass();
        $this->object->put('one', $value1);
        $this->object->put('two', $value2);
        $this->assertEquals(array($value1, $value2), $this->object->values());
    }

    /**
     * @covers Versionable\Common\Collection\Map::getIterator
     */
    public function testGetIterator()
    {
      $this->assertInstanceOf('\ArrayIterator', $this->object->getIterator());
    }

    /**
     * @covers Versionable\Common\Collection\Map::setValidator
     * @covers Versionable\Common\Collection\Map::getValidator
     */
    public function testSetGetValidator()
    {
        $validator = $this->getMock('Versionable\Common\Validator\ValidatorInterface');
        $this->object->setValidator($validator);

        $this->assertEquals($validator, $this->object->getValidator());
    }

}
